{
  "version": 3,
  "sources": ["../../src/inputotp/style/InputOtpStyle.js", "../../src/inputotp/BaseInputOtp.vue", "../../src/inputotp/InputOtp.vue", "../../src/inputotp/InputOtp.vue?vue&type=template&id=05b21321&lang.js"],
  "sourcesContent": ["import { style } from '@primeuix/styles/inputotp';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst classes = {\n    root: 'p-inputotp p-component',\n    pcInputText: 'p-inputotp-input'\n};\n\nexport default BaseStyle.extend({\n    name: 'inputotp',\n    style,\n    classes\n});\n", "<script>\nimport BaseInput from '@primevue/core/baseinput';\nimport InputOtpStyle from 'primevue/inputotp/style';\n\nexport default {\n    name: 'BaseInputOtp',\n    extends: BaseInput,\n    props: {\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: null\n        },\n        length: {\n            type: Number,\n            default: 4\n        },\n        mask: {\n            type: Boolean,\n            default: false\n        },\n        integerOnly: {\n            type: Boolean,\n            default: false\n        }\n    },\n    style: InputOtpStyle,\n    provide() {\n        return {\n            $pcInputOtp: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <template v-for=\"i in length\" :key=\"i\">\n            <slot :events=\"getTemplateEvents(i - 1)\" :attrs=\"getTemplateAttrs(i - 1)\" :index=\"i\">\n                <OtpInputText\n                    :value=\"tokens[i - 1]\"\n                    :type=\"inputType\"\n                    :class=\"cx('pcInputText')\"\n                    :name=\"$formName\"\n                    :inputmode=\"inputMode\"\n                    :variant=\"variant\"\n                    :readonly=\"readonly\"\n                    :disabled=\"disabled\"\n                    :size=\"size\"\n                    :invalid=\"invalid\"\n                    :tabindex=\"tabindex\"\n                    :unstyled=\"unstyled\"\n                    @input=\"onInput($event, i - 1)\"\n                    @focus=\"onFocus($event)\"\n                    @blur=\"onBlur($event)\"\n                    @paste=\"onPaste($event)\"\n                    @keydown=\"onKeyDown($event)\"\n                    @click=\"onClick($event)\"\n                    :pt=\"ptm('pcInputText')\"\n                />\n            </slot>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { isTouchDevice } from '@primeuix/utils/dom';\nimport InputText from 'primevue/inputtext';\nimport BaseInputOtp from './BaseInputOtp.vue';\n\nexport default {\n    name: 'InputOtp',\n    extends: BaseInputOtp,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur'],\n    data() {\n        return {\n            tokens: []\n        };\n    },\n    watch: {\n        modelValue: {\n            immediate: true,\n            handler(newValue) {\n                this.tokens = newValue ? newValue.split('') : new Array(this.length);\n            }\n        }\n    },\n    methods: {\n        getTemplateAttrs(index) {\n            return {\n                value: this.tokens[index]\n            };\n        },\n        getTemplateEvents(index) {\n            return {\n                input: (event) => this.onInput(event, index),\n                keydown: (event) => this.onKeyDown(event),\n                focus: (event) => this.onFocus(event),\n                blur: (event) => this.onBlur(event),\n                paste: (event) => this.onPaste(event)\n            };\n        },\n        onInput(event, index) {\n            this.tokens[index] = event.target.value;\n            this.updateModel(event);\n\n            if (event.inputType === 'deleteContentBackward') {\n                this.moveToPrev(event);\n            } else if (event.inputType === 'insertText' || event.inputType === 'deleteContentForward' || (isTouchDevice() && event instanceof CustomEvent)) {\n                this.moveToNext(event);\n            }\n        },\n        updateModel(event) {\n            const newValue = this.tokens.join('');\n\n            this.writeValue(newValue, event);\n            this.$emit('change', {\n                originalEvent: event,\n                value: newValue\n            });\n        },\n        moveToPrev(event) {\n            let prevInput = this.findPrevInput(event.target);\n\n            if (prevInput) {\n                prevInput.focus();\n                prevInput.select();\n            }\n        },\n        moveToNext(event) {\n            let nextInput = this.findNextInput(event.target);\n\n            if (nextInput) {\n                nextInput.focus();\n                nextInput.select();\n            }\n        },\n        findNextInput(element) {\n            let nextElement = element.nextElementSibling;\n\n            if (!nextElement) return;\n\n            return nextElement.nodeName === 'INPUT' ? nextElement : this.findNextInput(nextElement);\n        },\n        findPrevInput(element) {\n            let prevElement = element.previousElementSibling;\n\n            if (!prevElement) return;\n\n            return prevElement.nodeName === 'INPUT' ? prevElement : this.findPrevInput(prevElement);\n        },\n        onFocus(event) {\n            event.target.select();\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.$emit('blur', event);\n        },\n        onClick(event) {\n            setTimeout(() => event.target.select(), 1);\n        },\n        onKeyDown(event) {\n            if (event.ctrlKey || event.metaKey) {\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.moveToPrev(event);\n                    event.preventDefault();\n\n                    break;\n\n                case 'ArrowUp':\n                case 'ArrowDown':\n                    event.preventDefault();\n\n                    break;\n\n                case 'Backspace':\n                    if (event.target.value.length === 0) {\n                        this.moveToPrev(event);\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    this.moveToNext(event);\n                    event.preventDefault();\n\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Tab':\n                    break;\n\n                default:\n                    if ((this.integerOnly && !(event.code !== 'Space' && Number(event.key) >= 0 && Number(event.key) <= 9)) || (this.tokens.join('').length >= this.length && event.code !== 'Delete')) {\n                        event.preventDefault();\n                    }\n\n                    break;\n            }\n        },\n        onPaste(event) {\n            let paste = event.clipboardData.getData('text');\n\n            if (paste.length) {\n                let pastedCode = paste.substring(0, this.length);\n\n                if (!this.integerOnly || !isNaN(pastedCode)) {\n                    this.tokens = pastedCode.split('');\n                    this.updateModel(event);\n                }\n            }\n\n            event.preventDefault();\n        }\n    },\n    computed: {\n        inputMode() {\n            return this.integerOnly ? 'numeric' : 'text';\n        },\n        inputType() {\n            return this.mask ? 'password' : 'text';\n        }\n    },\n    components: {\n        OtpInputText: InputText\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <template v-for=\"i in length\" :key=\"i\">\n            <slot :events=\"getTemplateEvents(i - 1)\" :attrs=\"getTemplateAttrs(i - 1)\" :index=\"i\">\n                <OtpInputText\n                    :value=\"tokens[i - 1]\"\n                    :type=\"inputType\"\n                    :class=\"cx('pcInputText')\"\n                    :name=\"$formName\"\n                    :inputmode=\"inputMode\"\n                    :variant=\"variant\"\n                    :readonly=\"readonly\"\n                    :disabled=\"disabled\"\n                    :size=\"size\"\n                    :invalid=\"invalid\"\n                    :tabindex=\"tabindex\"\n                    :unstyled=\"unstyled\"\n                    @input=\"onInput($event, i - 1)\"\n                    @focus=\"onFocus($event)\"\n                    @blur=\"onBlur($event)\"\n                    @paste=\"onPaste($event)\"\n                    @keydown=\"onKeyDown($event)\"\n                    @click=\"onClick($event)\"\n                    :pt=\"ptm('pcInputText')\"\n                />\n            </slot>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { isTouchDevice } from '@primeuix/utils/dom';\nimport InputText from 'primevue/inputtext';\nimport BaseInputOtp from './BaseInputOtp.vue';\n\nexport default {\n    name: 'InputOtp',\n    extends: BaseInputOtp,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur'],\n    data() {\n        return {\n            tokens: []\n        };\n    },\n    watch: {\n        modelValue: {\n            immediate: true,\n            handler(newValue) {\n                this.tokens = newValue ? newValue.split('') : new Array(this.length);\n            }\n        }\n    },\n    methods: {\n        getTemplateAttrs(index) {\n            return {\n                value: this.tokens[index]\n            };\n        },\n        getTemplateEvents(index) {\n            return {\n                input: (event) => this.onInput(event, index),\n                keydown: (event) => this.onKeyDown(event),\n                focus: (event) => this.onFocus(event),\n                blur: (event) => this.onBlur(event),\n                paste: (event) => this.onPaste(event)\n            };\n        },\n        onInput(event, index) {\n            this.tokens[index] = event.target.value;\n            this.updateModel(event);\n\n            if (event.inputType === 'deleteContentBackward') {\n                this.moveToPrev(event);\n            } else if (event.inputType === 'insertText' || event.inputType === 'deleteContentForward' || (isTouchDevice() && event instanceof CustomEvent)) {\n                this.moveToNext(event);\n            }\n        },\n        updateModel(event) {\n            const newValue = this.tokens.join('');\n\n            this.writeValue(newValue, event);\n            this.$emit('change', {\n                originalEvent: event,\n                value: newValue\n            });\n        },\n        moveToPrev(event) {\n            let prevInput = this.findPrevInput(event.target);\n\n            if (prevInput) {\n                prevInput.focus();\n                prevInput.select();\n            }\n        },\n        moveToNext(event) {\n            let nextInput = this.findNextInput(event.target);\n\n            if (nextInput) {\n                nextInput.focus();\n                nextInput.select();\n            }\n        },\n        findNextInput(element) {\n            let nextElement = element.nextElementSibling;\n\n            if (!nextElement) return;\n\n            return nextElement.nodeName === 'INPUT' ? nextElement : this.findNextInput(nextElement);\n        },\n        findPrevInput(element) {\n            let prevElement = element.previousElementSibling;\n\n            if (!prevElement) return;\n\n            return prevElement.nodeName === 'INPUT' ? prevElement : this.findPrevInput(prevElement);\n        },\n        onFocus(event) {\n            event.target.select();\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.$emit('blur', event);\n        },\n        onClick(event) {\n            setTimeout(() => event.target.select(), 1);\n        },\n        onKeyDown(event) {\n            if (event.ctrlKey || event.metaKey) {\n                return;\n            }\n\n            switch (event.code) {\n                case 'ArrowLeft':\n                    this.moveToPrev(event);\n                    event.preventDefault();\n\n                    break;\n\n                case 'ArrowUp':\n                case 'ArrowDown':\n                    event.preventDefault();\n\n                    break;\n\n                case 'Backspace':\n                    if (event.target.value.length === 0) {\n                        this.moveToPrev(event);\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    this.moveToNext(event);\n                    event.preventDefault();\n\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Tab':\n                    break;\n\n                default:\n                    if ((this.integerOnly && !(event.code !== 'Space' && Number(event.key) >= 0 && Number(event.key) <= 9)) || (this.tokens.join('').length >= this.length && event.code !== 'Delete')) {\n                        event.preventDefault();\n                    }\n\n                    break;\n            }\n        },\n        onPaste(event) {\n            let paste = event.clipboardData.getData('text');\n\n            if (paste.length) {\n                let pastedCode = paste.substring(0, this.length);\n\n                if (!this.integerOnly || !isNaN(pastedCode)) {\n                    this.tokens = pastedCode.split('');\n                    this.updateModel(event);\n                }\n            }\n\n            event.preventDefault();\n        }\n    },\n    computed: {\n        inputMode() {\n            return this.integerOnly ? 'numeric' : 'text';\n        },\n        inputType() {\n            return this.mask ? 'password' : 'text';\n        }\n    },\n    components: {\n        OtpInputText: InputText\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["classes", "root", "pcInputText", "BaseStyle", "extend", "name", "style", "name", "BaseInput", "props", "readonly", "type", "Boolean", "tabindex", "Number", "length", "mask", "integerOnly", "style", "InputOtpStyle", "provide", "$pcInputOtp", "$parentInstance", "script", "BaseInputOtp", "inheritAttrs", "emits", "data", "tokens", "watch", "modelValue", "immediate", "handler", "newValue", "split", "Array", "methods", "getTemplateAttrs", "index", "value", "getTemplateEvents", "_this", "input", "event", "onInput", "keydown", "onKeyDown", "focus", "onFocus", "blur", "onBlur", "paste", "onPaste", "target", "updateModel", "inputType", "moveToPrev", "isTouchDevice", "CustomEvent", "moveToNext", "join", "writeValue", "$emit", "originalEvent", "prevInput", "findPrevInput", "select", "nextInput", "findNextInput", "element", "nextElement", "nextElementSibling", "nodeName", "prevElement", "previousElementSibling", "onClick", "setTimeout", "ctrlKey", "metaKey", "code", "preventDefault", "key", "clipboardData", "getData", "pastedCode", "substring", "isNaN", "computed", "inputMode", "components", "OtpInputText", "InputText", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "ptmi", "_Fragment", "_renderList", "i", "_renderSlot", "$slots", "events", "$options", "attrs", "_createVNode", "_component_OtpInputText", "$data", "$formName", "inputmode", "variant", "disabled", "size", "invalid", "unstyled", "$event", "_cache", "onKeydown", "pt", "ptm"]
}
